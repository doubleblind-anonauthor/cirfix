fitness_mode=outputwires
# fitness_mode=testcases # experimental, do not use

# seed=repair_2020-09-23-11:24:14 # update this if you want to replicate a run

# reed_solomon_decoder
# src_file=/home/author/projects/verilog_repair/benchmarks/opencores/reed_solomon_decoder/out_stage_expert3_buggy1.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/opencores/reed_solomon_decoder/RS_dec_tb_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/opencores/reed_solomon_decoder/run.sh
# orig_file=out_stage.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/opencores/reed_solomon_decoder/
# oracle=/home/author/projects/verilog_repair/benchmarks/opencores/reed_solomon_decoder/oracle_quarter.txt

# pairing
# src_file=/home/author/projects/verilog_repair/benchmarks/opencores/pairing/tate_pairing_expert1_buggy2.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/opencores/pairing/test_duursma_lee_algo_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/opencores/pairing/run.sh
# orig_file=tate_pairing.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/opencores/pairing/
# oracle=/home/author/projects/verilog_repair/benchmarks/opencores/pairing/oracle.txt

# sha3
# src_file=/home/author/projects/verilog_repair/benchmarks/opencores/sha3/low_throughput_core/keccak_expert1_buggy1.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/opencores/sha3/low_throughput_core/test_keccak_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/opencores/sha3/low_throughput_core/run_keccak.sh
# orig_file=keccak.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/opencores/sha3/low_throughput_core/
# oracle=/home/author/projects/verilog_repair/benchmarks/opencores/sha3/low_throughput_core/oracle_keccak_quarter.txt

# sdram_controller
# src_file=/home/author/projects/verilog_repair/benchmarks/sdram_controller/sdram_controller_expert1_buggy1.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/sdram_controller/sdram_controller_tb_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/sdram_controller/run.sh
# orig_file=sdram_controller.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/sdram_controller/
# oracle=/home/author/projects/verilog_repair/benchmarks/sdram_controller/oracle_quarter.txt

# first counter overflow
src_file=/home/author/projects/verilog_repair/benchmarks/first_counter_overflow/first_counter_overflow_expert2_buggy1.v
test_bench=/home/author/projects/verilog_repair/benchmarks/first_counter/first_counter_tb_t3.v
eval_script=/home/author/projects/verilog_repair/benchmarks/first_counter_overflow/run.sh
orig_file=first_counter_overflow.v
proj_dir=/home/author/projects/verilog_repair/benchmarks/first_counter_overflow/
oracle=/home/author/projects/verilog_repair/benchmarks/first_counter_overflow/oracle.txt

# flip_flop
# src_file=/home/author/projects/verilog_repair/benchmarks/flip_flop/tff_expert1_buggy2.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/flip_flop/tff_tb.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/flip_flop/run.sh
# orig_file=tff.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/flip_flop
# oracle=/home/author/projects/verilog_repair/benchmarks/flip_flop/oracle_quarter.txt

# fsm_full
# src_file=/home/author/projects/verilog_repair/benchmarks/fsm_full/fsm_full_expert3_buggy2.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/fsm_full/fsm_full_tb_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/fsm_full/run.sh
# orig_file=fsm_full.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/fsm_full/
# oracle=/home/author/projects/verilog_repair/benchmarks/fsm_full/oracle_quarter.txt

# lshift_reg
# src_file=/home/author/projects/verilog_repair/benchmarks/lshift_reg/lshift_reg_expert1_buggy2.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/lshift_reg/lshift_reg_tb_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/lshift_reg/run.sh
# orig_file=lshift_reg.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/lshift_reg/
# oracle=/home/author/projects/verilog_repair/benchmarks/lshift_reg/oracle_quarter.txt

# decoder_3_to_8
# src_file=/home/author/projects/verilog_repair/benchmarks/decoder_3_to_8/decoder_3_to_8_expert1_buggy2.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/decoder_3_to_8/decoder_3_to_8_tb_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/decoder_3_to_8/run.sh
# orig_file=decoder_3_to_8.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/decoder_3_to_8/
# oracle=/home/author/projects/verilog_repair/benchmarks/decoder_3_to_8/oracle.txt

# mux_4_1
# src_file=/home/author/projects/verilog_repair/benchmarks/mux_4_1/mux_4_1_expert1_buggy2.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/mux_4_1/mux_4_1_tb.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/mux_4_1/run.sh
# orig_file=mux_4_1.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/mux_4_1/
# oracle=/home/author/projects/verilog_repair/benchmarks/mux_4_1/oracle_new.txt

# i2c
# Notes: for i2c_slave_model, remove debug $display statements since they do not work too well with PyVerilog
# src_file=/home/author/projects/verilog_repair/benchmarks/opencores/i2c/i2c_master_bit_ctrl_expert2_buggy1.v
# test_bench=/home/author/projects/verilog_repair/benchmarks/opencores/i2c/tst_bench_top_t1.v
# eval_script=/home/author/projects/verilog_repair/benchmarks/opencores/i2c/run.sh
# orig_file=i2c_master_bit_ctrl.v
# proj_dir=/home/author/projects/verilog_repair/benchmarks/opencores/i2c
# oracle=/home/author/projects/verilog_repair/benchmarks/opencores/i2c/oracle_quarter.txt

gens=8
popsize=5000
restarts=1
mutation_rate=0.7
crossover_rate=0.3
deletion_rate=0.3
insertion_rate=0.3
replacement_rate=0.4
fault_loc=True
control_flow=True
limit_transitive_dependency_set=True
dependency_set_max=4
